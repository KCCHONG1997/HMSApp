package view;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Scanner;
import model.*;
import repository.*;
import controller.AppointmentController;
import controller.MedicineController;
import enums.PrescriptionStatus;

public class UpdateMedicalRecordUI {

    private Doctor doctor;
    private MedicalRecord medicalRecord;
    private Scanner sc;

    // Constructor to initialize with the doctor and medical record to be updated
    public UpdateMedicalRecordUI(Doctor doctor, MedicalRecord medicalRecord) {
        this.doctor = doctor;
        this.medicalRecord = medicalRecord;
        this.sc = new Scanner(System.in);
    }

    public void start() {
        // Add a new diagnosis
        System.out.println("Adding New Diagnosis");
        System.out.println("Enter Diagnosis Description:");
        String diagnosisDescription = sc.nextLine();
        Diagnosis newDiagnosis = addNewDiagnosis(medicalRecord.getPatientID(), diagnosisDescription);

        System.out.println("New diagnosis added successfully with autogenerated ID: " + newDiagnosis.getDiagnosisID());

        // Prompt to add treatment plan and prescription
        System.out.println("\nChoose an option to add for the new diagnosis:");
        System.out.println("1. Add Treatment Plan");
        System.out.println("2. Add Prescription");
        System.out.println("3. Add Both Treatment Plan and Prescription");

        int updateChoice = sc.nextInt();
        sc.nextLine(); // Consume newline left-over

        switch (updateChoice) {
            case 1 -> addTreatmentPlan(newDiagnosis);
            case 2 -> addPrescriptions(newDiagnosis);
            case 3 -> {
                addTreatmentPlan(newDiagnosis);
                addPrescriptions(newDiagnosis);
            }
            default -> System.out.println("Invalid choice.");
        }
    }

    private Diagnosis addNewDiagnosis(String patientId, String diagnosisDescription) {
        String diagnosisID = AppointmentController.generateRecordID(RecordFileType.DIAGNOSIS_RECORDS);
        Diagnosis diagnosis = new Diagnosis(patientId, diagnosisID, doctor.getUID(),
                                            medicalRecord.getRecordID(), LocalDateTime.now(), null,
                                            diagnosisDescription, null);
        //DiagnosisRepository.addDiagnosis(patientId, diagnosis);
        medicalRecord.addDiagnosis(diagnosis);
        DiagnosisRepository.addDiagnosis(patientId, diagnosis);
        DiagnosisRepository.saveAlltoCSV();
        return diagnosis;
    }

    private TreatmentPlans addTreatmentPlan(Diagnosis diagnosis) {
        System.out.println("Enter Treatment Description:");
        String treatmentDescription = sc.nextLine();
        TreatmentPlans treatmentPlan = new TreatmentPlans(diagnosis.getDiagnosisID(), LocalDateTime.now(), treatmentDescription);
        diagnosis.setTreatmentPlans(treatmentPlan);
        TreatmentPlansRepository.diagnosisToTreatmentPlansMap.put(diagnosis.getDiagnosisID(), treatmentPlan);
        TreatmentPlansRepository.saveAlltoCSV();
        System.out.println("Treatment plan added successfully for Diagnosis ID: " + diagnosis.getDiagnosisID());
        return treatmentPlan;
    }



    private void addPrescriptions(Diagnosis newDiagnosis) {
        boolean addMore = true;
        String medicineID;
		Medicine medicine;
		ArrayList<PrescribedMedication> newPrescribedMedicationsList;
        newPrescribedMedicationsList = new ArrayList<>();
        while (addMore) {
            System.out.println("\n--- Add Prescribed Medication ---");
            System.out.println("Enter Medication Name:");
            String medicationName = sc.nextLine();
            medicine = MedicineController.getMedicineByName(medicationName);

            if (medicine == null) {
                System.out.println("\n--- Invalid Prescribed Medication ---");
                continue;
            }

            System.out.println("Enter Quantity:");
            int quantity = sc.nextInt();
            System.out.println("Enter Period (Days):");
            int periodDays = sc.nextInt();
            sc.nextLine(); // Consume newline left-over
            System.out.println("Enter Dosage:");
            String dosage = sc.nextLine();

            PrescribedMedication newPrescribedMedication = new PrescribedMedication(newDiagnosis.getDiagnosisID(), medicine.getMedicineID(), quantity, periodDays, PrescriptionStatus.PENDING, dosage);
            newPrescribedMedicationsList.add(newPrescribedMedication);

            // Map diagnosis to medications
            //hashmap(diagnosis id to arraylist of prescribed medication)
            PrescribedMedicationRepository.diagnosisToMedicationsMap.put(newDiagnosis.getDiagnosisID(), newPrescribedMedicationsList);

            Prescription newPrescription = new Prescription(newDiagnosis.getDiagnosisID(), LocalDateTime.now(), newPrescribedMedicationsList);
            PrescriptionRepository.PRESCRIPTION_MAP.put(newDiagnosis.getDiagnosisID(), newPrescription);

            System.out.println("Medication prescribed successfully for Diagnosis ID: " + newDiagnosis.getDiagnosisID());

            System.out.print("Would you like to add another prescribed medication? (yes/no): ");
            String response = sc.nextLine().trim().toLowerCase();
            addMore = response.equals("yes");
        }
        System.out.println("Finished adding prescribed medications for Diagnosis ID: " + newDiagnosis.getDiagnosisID());
        PrescriptionRepository.saveAlltoCSV();
        PrescribedMedicationRepository.saveAlltoCSV();

    }


}
